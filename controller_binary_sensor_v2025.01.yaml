# Blueprint metadata
blueprint:
  name: Advanced Controller for Binary (On/Off) Sensor - v2025.01
  description: |
    Automation for executing on and off actions for any binary sensor, for example motion or presence detectors.
    The blueprint uses entities and does not depend on the integration.
    
    **Inputs marked with * are mandatory.**
    
    Trun off the *"Off" state unique actions / Enbale controller event for "off" state* toggle if you dont want to send a turn off signal to the controlled device(s)
    
    Automations created with this blueprint can be connected with one or more of my [zeolyth](https://github.com/zeolyth/home_assistant_blueprints/) or [Awesome HA Blueprints'](https://epmatt.github.io/awesome-ha-blueprints/docs/blueprints/hooks) hooks.
    Hooks allow to easily create controller-based automations for interacting with media players, lights, covers and more.
    
    This blueprint uses regions and therefore is only compatible with HA version 2024.6 and newer.
    
    The script is based on the [Awesome HA Blueprints](https://epmatt.github.io/awesome-ha-blueprints) project.
    
    Version: 2025.01-2025.02.23
  source_url: https://github.com/zeolyth/home_assistant_blueprints/blob/main/controller_binary_sensor_v2025.01.yaml
  domain: automation
  homeassistant:
    min_version: 2024.6.0
  input:
    base:
      name: Controller
      input:
        controller_entity:
          name: Controller entity*
          description: The binary sensor to use for the automation
          selector:
            entity:
              domain: binary_sensor
        event_id:
          name: Event identifier
          description: |-
            An event identifier to separate the fired event from the defult events (ahb_controller_event).
            Give it a unique name if you want to use the delayed turn off function by the lights or if you experience problems by concurrent controller actions. You have to use the same unique name by the related hooks.
            
            Valid characters: lowercase letters, numbers, and underscores (not validatated, usage of invalid characters can end up in crashing the automatization).
            
            Use it in both the controller and the hook automation that you want to seaparate. Controllers and hooks with the same event ID will cooperate with each other.
            
            Only compatible with zeolyth controllers and hooks!
          default: ahb_controller_event
        motion_sensor:
          name: The entity is a motion or presence sensor
          description: |-
            Enable it if the controller entity is a motion or presence sensor.
            
            If enabled, the controller will send a special controller model identifier in the event data to distinguish it from other binary sensors.
            With this setting you can disable the delayed turn off function for motion sensors in light hooks.
          default: true
          selector:
            boolean:
    # state_on actions
    state_on:
      name: On state unique actions
      collapsed: true
      input:
        state_on_trigger:
          name: Enbale controller event for on state
          description: If disabled, the original controller event won't be triggered, that means the hooked automatization will not execute.
          default: true
          selector:
            boolean:
        state_on_action:
          name: On state action(s)
          description: Action(s) to run on on state.
          default: []
          selector:
            action:
    # state_off actions
    state_off:
      name: Off state unique actions
      collapsed: true
      input:
        state_off_trigger:
          name: Enbale controller event for off state
          description: |-
            If disabled, the original controller event won't be triggered, that means the hooked automatization will not execute.
            
            Trun it off if you dont want to send a turn off signal to controlled device(s)
          default: true
          selector:
            boolean:
        state_off_action:
          name: Off state action(s)
          description: Action(s) to run on off state.
          default: []
          selector:
            action:
# Automation schema
variables:
  # build data to send within a controller event
  controller_entity: !input controller_entity
  controller_id: '{{controller_entity}}'
  motion_sensor: !input motion_sensor
  controller_model_standard: Binary Sensor
  controller_model_motion: Motion Sensor
  # state variables
  state_on_trigger: !input state_on_trigger
  state_off_trigger: !input state_off_trigger
  # pre-choose actions for states
  # no need to perform this task at automation runtime
  state_on: 'on'
  state_off: 'off'
mode: restart
max_exceeded: silent
trigger:
  - trigger: event
    event_type: state_changed
    event_data:
      entity_id: !input controller_entity
condition:
  - condition: and
    conditions:
      # check that the state change event is not empty
      - condition: template
        value_template: >-
          {%- set trigger_action = trigger.event.data.new_state.state -%}
          {{ trigger_action not in ["", "None"] }}
      # check if the event is relative to a real state change, and not only some minor changes in the sensor attributes
      - condition: template
        value_template: '{{ trigger.event.data.new_state.state != trigger.event.data.old_state.state }}'
action:
  - variables:
      trigger_action: '{{ trigger.event.data.new_state.state }}'
  # choose the sequence to run based on the received state change event
  - choose:
      - conditions: '{{ trigger_action | string == state_on }}'
        sequence:
          # if trigger is enabled fire the event
          - if:
              - condition: template
                value_template: '{{ state_on_trigger }}'
            then:
              - event: !input event_id
                event_data:
                  controller: '{{ controller_id }}'
                  action: state_on
                  model: '{{ controller_model_motion if motion_sensor else controller_model_standard }}'
          # run the custom action
          - choose:
              - conditions: []
                sequence: !input state_on_action
      - conditions: '{{ trigger_action | string == state_off }}'
        sequence:
          # if trigger is enabled fire the event
          - if:
              - condition: template
                value_template: '{{ state_off_trigger }}'
            then:
              - event: !input event_id
                event_data:
                  controller: '{{ controller_id }}'
                  action: state_off
                  model: '{{ controller_model_motion if motion_sensor else controller_model_standard }}'
          # run the custom action
          - choose:
              - conditions: []
                sequence: !input state_off_action
