# Blueprint metadata
blueprint:
  name: Advanced Controller for IKEA E1524/E1810 TRÅDFRI Wireless 5-Button Remote
  description: |
    Automation for executing any kind of action triggered by the  IKEA E1524/E1810 TRÅDFRI Wireless 5-Button Remote, with long press loop and double click support.
    The blueprint uses entities and is compatible with Zigbee2MQTT.
    
    **Inputs marked with * are mandatory.**
    
    Automations created with this blueprint can be connected with one or more of [my] (https://github.com/zsolthy/home_assistant_blueprints/) or [Awesome HA Blueprints'] (https://epmatt.github.io/awesome-ha-blueprints/docs/blueprints/hooks) hooks.
    Hooks allow to easily create controller-based automations for interacting with media players, lights, covers and more.
    
    This blueprint uses regions and therefore is only compatible with HA version 2024.6 and newer.
    
    The script is based on the [Awesome HA Blueprints](https://epmatt.github.io/awesome-ha-blueprints) project.
    
    Version 2024.09.27
  source_url: https://github.com/zsolthy/home_assistant_blueprints/blob/main/controller_ikea_e1524_e1810_advanced.yaml
  domain: automation
  homeassistant:
    min_version: 2024.6.0
  input:
    base:
      name: Controller
      input:
        controller_entity:
          name: Controller entity*
          description: The action sensor of the controller to use for the automation
          default: ''
          selector:
            entity:
              domain: sensor
        helper_last_controller_event:
          name: Helper for last controller event*
          description: Input Text used to store the last event fired by the controller. You will need to manually create a text input entity for this, please read the blueprint Additional Notes for more info.
          default: ''
          selector:
            entity:
              domain: input_text
    # center button actions
    button_center:
      name: Center (toggle) button unique actions and advanced settings
      collapsed: true
      input:
        action_button_center_short_trigger:
          name: Enbale controller event for short press
          description: If disabled, the original controller event won't be triggered, that means the hooked automatization will not execute.
          default: true
          selector:
            boolean:
        action_button_center_short:
          name: Short press action(s)
          description: Action(s) to run on short press.
          default: []
          selector:
            action:
        action_button_center_long_trigger:
          name: Enbale controller event for long press
          description: If disabled, the original controller event won't be triggered, that means the hooked automatization will not execute.
          default: true
          selector:
            boolean:
        action_button_center_long:
          name: Long press action(s)
          description: Action(s) to run on long press.
          default: []
          selector:
            action:
        button_center_double_press:
          name: Expose double press event
          description: Choose whether or not to expose the double press event for the button. Turn this on if you are providing an action for the event.
          default: false
          selector:
            boolean:
        action_button_center_double_trigger:
          name: Enbale controller event for double press
          description: If disabled, the original controller event won't be triggered, that means the hooked automatization will not execute.
          default: true
          selector:
            boolean:
        action_button_center_double:
          name: Double press action(s)
          description: Action(s) to run on double press.
          default: []
          selector:
            action:
    # up button actions
    button_up:
      name: Up button unique actions and advanced settings
      collapsed: true
      input:
        action_button_up_short_trigger:
          name: Enbale controller event for short press
          description: If disabled, the original controller event won't be triggered, that means the hooked automatization will not execute.
          default: true
          selector:
            boolean:
        action_button_up_short:
          name: Short press action(s)
          description: Action(s) to run on short press.
          default: []
          selector:
            action:
        action_button_up_long_trigger:
          name: Enbale controller event for long press
          description: If disabled, the original controller event won't be triggered, that means the hooked automatization will not execute.
          default: true
          selector:
            boolean:
        button_up_long_loop:
          name: Long press - loop until release
          description: >-
            Loop the button action until the button is released.
            CAUTION! If turned off and the button controller event for long press is enabled, the related transition WILL NOT loop!
          default: true
          selector:
            boolean:
        action_button_up_long:
          name: Long press action(s)
          description: Action(s) to run on long press.
          default: []
          selector:
            action:
        action_button_up_release_trigger:
          name: Enbale controller event for long press release
          description: If disabled, the original controller event won't be triggered, that means the hooked automatization will not execute.
          default: true
          selector:
            boolean:
        action_button_up_release:
          name: Long press release action(s)
          description: Action(s) to run on long press release.
          default: []
          selector:
            action:
        button_up_double_press:
          name: Expose double press event
          description: Choose whether or not to expose the double press event for the button. Turn this on if you are providing an action for the event.
          default: false
          selector:
            boolean:
        action_button_up_double_trigger:
          name: Enbale controller event for double press
          description: If disabled, the original controller event won't be triggered, that means the hooked automatization will not execute.
          default: true
          selector:
            boolean:
        action_button_up_double:
          name: Double press action(s)
          description: Action(s) to run on double press.
          default: []
          selector:
            action:
    # down button actions
    button_down:
      name: Down button unique actions and advanced settings
      collapsed: true
      input:
        action_button_down_short_trigger:
          name: Enbale controller event for short press
          description: If disabled, the original controller event won't be triggered, that means the hooked automatization will not execute.
          default: true
          selector:
            boolean:
        action_button_down_short:
          name: Short press action(s)
          description: Action(s) to run on short press.
          default: []
          selector:
            action:
        action_button_down_long_trigger:
          name: Enbale controller event for long press
          description: If disabled, the original controller event won't be triggered, that means the hooked automatization will not execute.
          default: true
          selector:
            boolean:
        button_down_long_loop:
          name: Long press - loop until release
          description: >-
            Loop the button action until the button is released.
            CAUTION! If turned off and the button controller event for long press is enabled, the related transition WILL NOT loop!
          default: true
          selector:
            boolean:
        action_button_down_long:
          name: Long press action(s)
          description: Action(s) to run on long press.
          default: []
          selector:
            action:
        action_button_down_release_trigger:
          name: Enbale controller event for long press release
          description: If disabled, the original controller event won't be triggered, that means the hooked automatization will not execute.
          default: true
          selector:
            boolean:
        action_button_down_release:
          name: Long press release action(s)
          description: Action(s) to run on long press release.
          default: []
          selector:
            action:
        button_down_double_press:
          name: Expose double press event
          description: Choose whether or not to expose the double press event for the button. Turn this on if you are providing an action for the event.
          default: false
          selector:
            boolean:
        action_button_down_double_trigger:
          name: Enbale controller event for double press
          description: If disabled, the original controller event won't be triggered, that means the hooked automatization will not execute.
          default: true
          selector:
            boolean:
        action_button_down_double:
          name: Double press action(s)
          description: Action(s) to run on double press.
          default: []
          selector:
            action:
    # left button actions
    button_left:
      name: Left button unique actions and advanced settings
      collapsed: true
      input:
        action_button_left_short_trigger:
          name: Enbale controller event for short press
          description: If disabled, the original controller event won't be triggered, that means the hooked automatization will not execute.
          default: true
          selector:
            boolean:
        action_button_left_short:
          name: Short press action(s)
          description: Action(s) to run on short press.
          default: []
          selector:
            action:
        action_button_left_long_trigger:
          name: Enbale controller event for long press
          description: If disabled, the original controller event won't be triggered, that means the hooked automatization will not execute.
          default: true
          selector:
            boolean:
        button_left_long_loop:
          name: Long press - loop until release
          description: >-
            Loop the button action until the button is released.
            CAUTION! If turned off and the button controller event for long press is enabled, the related transition WILL NOT loop!
          default: true
          selector:
            boolean:
        action_button_left_long:
          name: Long press action(s)
          description: Action(s) to run on long press.
          default: []
          selector:
            action:
        action_button_left_release_trigger:
          name: Enbale controller event for long press release
          description: If disabled, the original controller event won't be triggered, that means the hooked automatization will not execute.
          default: true
          selector:
            boolean:
        action_button_left_release:
          name: Long press release action(s)
          description: Action(s) to run on long press release.
          default: []
          selector:
            action:
        button_left_double_press:
          name: Expose double press event
          description: Choose whether or not to expose the double press event for the button. Turn this on if you are providing an action for the event.
          default: false
          selector:
            boolean:
        action_button_left_double_trigger:
          name: Enbale controller event for double press
          description: If disabled, the original controller event won't be triggered, that means the hooked automatization will not execute.
          default: true
          selector:
            boolean:
        action_button_left_double:
          name: Double press action(s)
          description: Action(s) to run on double press.
          default: []
          selector:
            action:
    # right button actions
    button_right:
      name: Right button unique actions and advanced settings
      collapsed: true
      input:
        action_button_right_short_trigger:
          name: Enbale controller event for short press
          description: If disabled, the original controller event won't be triggered, that means the hooked automatization will not execute.
          default: true
          selector:
            boolean:
        action_button_right_short:
          name: Short press action(s)
          description: Action(s) to run on short press.
          default: []
          selector:
            action:
        action_button_right_long_trigger:
          name: Enbale controller event for long press
          description: If disabled, the original controller event won't be triggered, that means the hooked automatization will not execute.
          default: true
          selector:
            boolean:
        button_right_long_loop:
          name: Long press - loop until release
          description: >-
            Loop the button action until the button is released.
            CAUTION! If turned off and the button controller event for long press is enabled, the related transition WILL NOT loop!
          default: true
          selector:
            boolean:
        action_button_right_long:
          name: Long press action(s)
          description: Action(s) to run on long press.
          default: []
          selector:
            action:
        action_button_right_release_trigger:
          name: Enbale controller event for long press release
          description: If disabled, the original controller event won't be triggered, that means the hooked automatization will not execute.
          default: true
          selector:
            boolean:
        action_button_right_release:
          name: Long press release action(s)
          description: Action(s) to run on long press release.
          default: []
          selector:
            action:
        button_right_double_press:
          name: Expose double press event
          description: Choose whether or not to expose the double press event for the button. Turn this on if you are providing an action for the event.
          default: false
          selector:
            boolean:
        action_button_right_double_trigger:
          name: Enbale controller event for double press
          description: If disabled, the original controller event won't be triggered, that means the hooked automatization will not execute.
          default: true
          selector:
            boolean:
        action_button_right_double:
          name: Double press action(s)
          description: Action(s) to run on double press.
          default: []
          selector:
            action:
    # timing settings
    timing_settings:
      name: Timing settings
      collapsed: true
      input:
        button_long_max_loop_repeats:
          name: Long press - Maximum loop repeats
          description: >-
            Maximum number of repeats for the custom action, when looping is enabled.
            Use it as a safety limit to prevent an endless loop in case the corresponding stop event is not received.
          default: 500
          selector:
            number:
              min: 1
              max: 5000
              mode: box
        helper_double_press_delay:
          name: Helper - Double Press delay
          description: Max delay between the first and the second button press for the double press event. Provide a value only if you are using a double press action. Increase this value if you notice that the double press action is not triggered properly.
          default: 500
          selector:
            number:
              min: 100
              max: 5000
              unit_of_measurement: milliseconds
              mode: box
              step: 10
        helper_debounce_delay:
          name: Helper - Debounce delay
          description:
            Delay used for debouncing RAW controller events, by default set to 0. A value of 0 disables the debouncing feature. Increase this value if you notice custom actions or linked Hooks running multiple times when interacting with the device. When the controller needs to be debounced,
            usually a value of 100 is enough to remove all duplicate events.
          default: 50
          selector:
            number:
              min: 0
              max: 1000
              unit_of_measurement: milliseconds
              mode: box
              step: 10
# Automation schema
variables:
  # build data to send within a controller event
  controller_entity: !input controller_entity
  controller_id: '{{controller_entity}}'
  controller_model: IKEA E1524/E1810 TRÅDFRI Wireless 5-Button Remote
  helper_last_controller_event: !input helper_last_controller_event
  # button action variables
  button_center_short_trigger: !input action_button_center_short_trigger
  button_center_long_trigger: !input action_button_center_long_trigger
  button_center_double_trigger: !input action_button_center_double_trigger
  button_center_double_press: !input button_center_double_press
  button_up_short_trigger: !input action_button_up_short_trigger
  button_up_long_trigger: !input action_button_up_long_trigger
  button_up_long_loop: !input button_up_long_loop
  button_up_release_trigger: !input action_button_up_release_trigger
  button_up_double_trigger: !input action_button_up_double_trigger
  button_up_double_press: !input button_up_double_press
  button_down_short_trigger: !input action_button_down_short_trigger
  button_down_long_trigger: !input action_button_down_long_trigger
  button_down_long_loop: !input button_down_long_loop
  button_down_release_trigger: !input action_button_down_release_trigger
  button_down_double_trigger: !input action_button_down_double_trigger
  button_down_double_press: !input button_down_double_press
  button_left_short_trigger: !input action_button_left_short_trigger
  button_left_long_trigger: !input action_button_left_long_trigger
  button_left_long_loop: !input button_left_long_loop
  button_left_release_trigger: !input action_button_left_release_trigger
  button_left_double_trigger: !input action_button_left_double_trigger
  button_left_double_press: !input button_left_double_press
  button_right_short_trigger: !input action_button_right_short_trigger
  button_right_long_trigger: !input action_button_right_long_trigger
  button_right_long_loop: !input button_right_long_loop
  button_right_release_trigger: !input action_button_right_release_trigger
  button_right_double_trigger: !input action_button_right_double_trigger
  button_right_double_press: !input button_right_double_press
  # timing variables
  button_long_max_loop_repeats: !input button_long_max_loop_repeats
  helper_double_press_delay: !input helper_double_press_delay
  helper_debounce_delay: !input helper_debounce_delay
  # adjusted debounce delay so that the resulting double press delay is exactly as specified by the user when running the action, taking also account of debouncing
  # make sure it never goes below the minimum double press delay
  adjusted_double_press_delay: '{{ [helper_double_press_delay - helper_debounce_delay, 100] | max }}'
  # pre-choose actions for buttons based on configured integration
  # no need to perform this task at automation runtime
  button_center_short: 'toggle'
  button_center_long: 'toggle_hold'
  button_up_short: 'brightness_up_click'
  button_up_long: 'brightness_up_hold'
  button_up_release: 'brightness_up_release'
  button_down_short: 'brightness_down_click'
  button_down_long: 'brightness_down_hold'
  button_down_release: 'brightness_down_release'
  button_left_short: 'arrow_left_click'
  button_left_long: 'arrow_left_hold'
  button_left_release: 'arrow_left_release'
  button_right_short: 'arrow_right_click'
  button_right_long: 'arrow_right_hold'
  button_right_release: 'arrow_right_release'
mode: restart
max_exceeded: silent
trigger:
  - platform: event
    event_type: state_changed
    event_data:
      entity_id: !input controller_entity
condition:
  - condition: and
    conditions:
      # check that the button event is not empty
      - >-
        {%- set trigger_action = trigger.event.data.new_state.state -%}
        {{ trigger_action not in ["", "None"] }}
      # check if the event is relative to a real state change, and not only some minor changes in the sensor attributes
      # this is required since multiple state_changed events are fired for a single button press, with the result of the automation being triggered multiple times
      - '{{ trigger.event.data.new_state.state != trigger.event.data.old_state.state }}'
action:
  # debouncing - when automation is triggered multiple times, the last automation run is the one which completes execution, due to mode restart
  # therefore previous runs must wait for the debounce delay before executing any other action
  # if the delay expires and the automation is still running it means it's the last run and execution can continue
  - delay:
      milliseconds: '{{ helper_debounce_delay }}'
  # extract button event from the trigger
  # provide a single string value to check against
  - variables:
      trigger_action: '{{ trigger.event.data.new_state.state }}'
      trigger_delta: '{{ (as_timestamp(now()) - ((states(helper_last_controller_event) | from_json).t if helper_last_controller_event is not none and (states(helper_last_controller_event) | regex_match("^\{\"a\":\".*\",\"t\":\d+\.\d+\}$")) else as_timestamp("1970-01-01 00:00:00"))) * 1000 }}'
      last_controller_event: '{{ (states(helper_last_controller_event) | from_json).a if helper_last_controller_event is not none and (states(helper_last_controller_event)  | regex_match("^\{\"a\":\".*\",\"t\":\d+\.\d+\}$")) else "" }}'
  # update helper
  - service: input_text.set_value
    data:
      entity_id: !input helper_last_controller_event
      value: '{{ {"a":trigger_action,"t":as_timestamp(now())} | to_json }}'
  # choose the sequence to run based on the received button event
  - choose:
      - conditions: '{{ trigger_action | string == button_center_short }}'
        sequence:
          - choose:
              # if double press event is enabled
              - conditions: '{{ button_center_double_press }}'
                sequence:
                  - choose:
                      # if previous event was a short press
                      - conditions: '{{ trigger_action | string in states(helper_last_controller_event) and trigger_delta | int <= helper_double_press_delay | int }}'
                        sequence:
                          # store the double press event in the last controller event helper
                          - service: input_text.set_value
                            data:
                              entity_id: !input helper_last_controller_event
                              value: '{{ {"a":"double_press","t":as_timestamp(now())} | to_json }}'
                          # run the double press action
                          # if trigger is enabled fire the event
                          - if:
                              - condition: template
                                value_template: '{{ button_center_double_trigger }}'
                            then:
                              - event: ahb_controller_event
                                event_data:
                                  controller: '{{ controller_id }}'
                                  action: button_center_double
                                  model: '{{ controller_model }}'
                          # run the custom action
                          - choose:
                              - conditions: []
                                sequence: !input action_button_center_double
                    # previous event was not a short press
                    default:
                      # wait for the double press event to occur, within the provided delay
                      # if the second press is received, automation is restarted
                      - delay:
                          milliseconds: '{{ adjusted_double_press_delay }}'
                      # if delay expires, no second press was received, therefore run the short press action
                      # run the short press action
                      # if trigger is enabled fire the event
                      - if:
                          - condition: template
                            value_template: '{{ button_center_short_trigger }}'
                        then:
                          - event: ahb_controller_event
                            event_data:
                              controller: '{{ controller_id }}'
                              action: button_center_short
                              model: '{{ controller_model }}'
                      # run the custom action
                      - choose:
                          - conditions: []
                            sequence: !input action_button_center_short
            # if double press event is disabled run the action for the single short press
            default:
              # if trigger is enabled fire the event
              - if:
                  - condition: template
                    value_template: '{{ button_center_short_trigger }}'
                then:
                  - event: ahb_controller_event
                    event_data:
                      controller: '{{ controller_id }}'
                      action: button_center_short
                      model: '{{ controller_model }}'
              # run the custom action
              - choose:
                  - conditions: []
                    sequence: !input action_button_center_short
      - conditions: '{{ trigger_action | string == button_center_long }}'
        sequence:
          # if trigger is enabled fire the event only once before looping the action
          - if:
              - condition: template
                value_template: '{{ button_center_long_trigger }}'
            then:
              - event: ahb_controller_event
                event_data:
                  controller: '{{ controller_id }}'
                  action: button_center_long
                  model: '{{ controller_model }}'
          - sequence: !input action_button_center_long
      - conditions: '{{ trigger_action | string == button_up_short }}'
        sequence:
          - choose:
              # if double press event is enabled
              - conditions: '{{ button_up_double_press }}'
                sequence:
                  - choose:
                      # if previous event was a short press
                      - conditions: '{{ trigger_action | string in states(helper_last_controller_event) and trigger_delta | int <= helper_double_press_delay | int }}'
                        sequence:
                          # store the double press event in the last controller event helper
                          - service: input_text.set_value
                            data:
                              entity_id: !input helper_last_controller_event
                              value: '{{ {"a":"double_press","t":as_timestamp(now())} | to_json }}'
                          # run the double press action
                          # if trigger is enabled fire the event
                          - if:
                              - condition: template
                                value_template: '{{ button_up_double_trigger }}'
                            then:
                              - event: ahb_controller_event
                                event_data:
                                  controller: '{{ controller_id }}'
                                  action: button_up_double
                                  model: '{{ controller_model }}'
                          # run the custom action
                          - choose:
                              - conditions: []
                                sequence: !input action_button_up_double
                    # previous event was not a short press
                    default:
                      # wait for the double press event to occur, within the provided delay
                      # if the second press is received, automation is restarted
                      - delay:
                          milliseconds: '{{ adjusted_double_press_delay }}'
                      # if delay expires, no second press was received, therefore run the short press action
                      # run the short press action
                      # if trigger is enabled fire the event
                      - if:
                          - condition: template
                            value_template: '{{ button_up_short_trigger }}'
                        then:
                          - event: ahb_controller_event
                            event_data:
                              controller: '{{ controller_id }}'
                              action: button_up_short
                              model: '{{ controller_model }}'
                      # run the custom action
                      - choose:
                          - conditions: []
                            sequence: !input action_button_up_short
            # if double press event is disabled run the action for the single short press
            default:
              # if trigger is enabled fire the event
              - if:
                  - condition: template
                    value_template: '{{ button_up_short_trigger }}'
                then:
                  - event: ahb_controller_event
                    event_data:
                      controller: '{{ controller_id }}'
                      action: button_up_short
                      model: '{{ controller_model }}'
              # run the custom action
              - choose:
                  - conditions: []
                    sequence: !input action_button_up_short
      - conditions: '{{ trigger_action | string == button_up_long }}'
        sequence:
          # if trigger is enabled fire the event only once before looping the action
          - if:
              - condition: template
                value_template: '{{ button_up_long_trigger }}'
            then:
              - event: ahb_controller_event
                event_data:
                  controller: '{{ controller_id }}'
                  action: button_up_long
                  model: '{{ controller_model }}'
          - choose:
              # if looping is enabled, loop the action for a finite number of iterations
              - conditions: '{{ button_up_long_loop }}'
                sequence:
                  - repeat:
                      while: '{{ repeat.index < button_long_max_loop_repeats | int }}'
                      sequence: !input action_button_up_long
            # if looping is not enabled run the custom action only once
            default: !input action_button_up_long
      - conditions:
          - '{{ trigger_action | string == button_up_release }}'
          # need to check the previous button event, stored in the provided input_text
          - '{{ last_controller_event | string == button_up_long }}'
        sequence:
          # if trigger is enabled fire the event
          - if:
              - condition: template
                value_template: '{{ button_up_release_trigger }}'
            then:
              - event: ahb_controller_event
                event_data:
                  controller: '{{ controller_id }}'
                  action: button_up_release
                  model: '{{ controller_model }}'
          # run the custom action
          - choose:
              - conditions: []
                sequence: !input action_button_up_release
      - conditions: '{{ trigger_action | string == button_down_short }}'
        sequence:
          - choose:
              # if double press event is enabled
              - conditions: '{{ button_down_double_press }}'
                sequence:
                  - choose:
                      # if previous event was a short press
                      - conditions: '{{ trigger_action | string in states(helper_last_controller_event) and trigger_delta | int <= helper_double_press_delay | int }}'
                        sequence:
                          # store the double press event in the last controller event helper
                          - service: input_text.set_value
                            data:
                              entity_id: !input helper_last_controller_event
                              value: '{{ {"a":"double_press","t":as_timestamp(now())} | to_json }}'
                          # run the double press action
                          # if trigger is enabled fire the event
                          - if:
                              - condition: template
                                value_template: '{{ button_down_double_trigger }}'
                            then:
                              - event: ahb_controller_event
                                event_data:
                                  controller: '{{ controller_id }}'
                                  action: button_down_double
                                  model: '{{ controller_model }}'
                          # run the custom action
                          - choose:
                              - conditions: []
                                sequence: !input action_button_down_double
                    # previous event was not a short press
                    default:
                      # wait for the double press event to occur, within the provided delay
                      # if the second press is received, automation is restarted
                      - delay:
                          milliseconds: '{{ adjusted_double_press_delay }}'
                      # if delay expires, no second press was received, therefore run the short press action
                      # run the short press action
                      # if trigger is enabled fire the event
                      - if:
                          - condition: template
                            value_template: '{{ button_down_short_trigger }}'
                        then:
                          - event: ahb_controller_event
                            event_data:
                              controller: '{{ controller_id }}'
                              action: button_down_short
                              model: '{{ controller_model }}'
                      # run the custom action
                      - choose:
                          - conditions: []
                            sequence: !input action_button_down_short
            # if double press event is disabled run the action for the single short press
            default:
              # if trigger is enabled fire the event
              - if:
                  - condition: template
                    value_template: '{{ button_down_short_trigger }}'
                then:
                  - event: ahb_controller_event
                    event_data:
                      controller: '{{ controller_id }}'
                      action: button_down_short
                      model: '{{ controller_model }}'
              # run the custom action
              - choose:
                  - conditions: []
                    sequence: !input action_button_down_short
      - conditions: '{{ trigger_action | string == button_down_long }}'
        sequence:
          # if trigger is enabled fire the event only once before looping the action
          - if:
              - condition: template
                value_template: '{{ button_down_long_trigger }}'
            then:
              - event: ahb_controller_event
                event_data:
                  controller: '{{ controller_id }}'
                  action: button_down_long
                  model: '{{ controller_model }}'
          - choose:
              # if looping is enabled, loop the action for a finite number of iterations
              - conditions: '{{ button_down_long_loop }}'
                sequence:
                  - repeat:
                      while: '{{ repeat.index < button_long_max_loop_repeats | int }}'
                      sequence: !input action_button_down_long
            # if looping is not enabled run the custom action only once
            default: !input action_button_down_long
      - conditions:
          - '{{ trigger_action | string == button_down_release }}'
          # need to check the previous button event, stored in the provided input_text
          - '{{ last_controller_event | string == button_down_long }}'
        sequence:
          # if trigger is enabled fire the event
          - if:
              - condition: template
                value_template: '{{ button_down_release_trigger }}'
            then:
              - event: ahb_controller_event
                event_data:
                  controller: '{{ controller_id }}'
                  action: button_down_release
                  model: '{{ controller_model }}'
          # run the custom action
          - choose:
              - conditions: []
                sequence: !input action_button_down_release
      - conditions: '{{ trigger_action | string == button_left_short }}'
        sequence:
          - choose:
              # if double press event is enabled
              - conditions: '{{ button_left_double_press }}'
                sequence:
                  - choose:
                      # if previous event was a short press
                      - conditions: '{{ trigger_action | string in states(helper_last_controller_event) and trigger_delta | int <= helper_double_press_delay | int }}'
                        sequence:
                          # store the double press event in the last controller event helper
                          - service: input_text.set_value
                            data:
                              entity_id: !input helper_last_controller_event
                              value: '{{ {"a":"double_press","t":as_timestamp(now())} | to_json }}'
                          # run the double press action
                          # if trigger is enabled fire the event
                          - if:
                              - condition: template
                                value_template: '{{ button_left_double_trigger }}'
                            then:
                              - event: ahb_controller_event
                                event_data:
                                  controller: '{{ controller_id }}'
                                  action: button_left_double
                                  model: '{{ controller_model }}'
                          # run the custom action
                          - choose:
                              - conditions: []
                                sequence: !input action_button_left_double
                    # previous event was not a short press
                    default:
                      # wait for the double press event to occur, within the provided delay
                      # if the second press is received, automation is restarted
                      - delay:
                          milliseconds: '{{ adjusted_double_press_delay }}'
                      # if delay expires, no second press was received, therefore run the short press action
                      # run the short press action
                      # if trigger is enabled fire the event
                      - if:
                          - condition: template
                            value_template: '{{ button_left_short_trigger }}'
                        then:
                          - event: ahb_controller_event
                            event_data:
                              controller: '{{ controller_id }}'
                              action: button_left_short
                              model: '{{ controller_model }}'
                      # run the custom action
                      - choose:
                          - conditions: []
                            sequence: !input action_button_left_short
            # if double press event is disabled run the action for the single short press
            default:
              # if trigger is enabled fire the event
              - if:
                  - condition: template
                    value_template: '{{ button_left_short_trigger }}'
                then:
                  - event: ahb_controller_event
                    event_data:
                      controller: '{{ controller_id }}'
                      action: button_left_short
                      model: '{{ controller_model }}'
              # run the custom action
              - choose:
                  - conditions: []
                    sequence: !input action_button_left_short
      - conditions: '{{ trigger_action | string == button_left_long }}'
        sequence:
          # if trigger is enabled fire the event only once before looping the action
          - if:
              - condition: template
                value_template: '{{ button_left_long_trigger }}'
            then:
              - event: ahb_controller_event
                event_data:
                  controller: '{{ controller_id }}'
                  action: button_left_long
                  model: '{{ controller_model }}'
          - choose:
              # if looping is enabled, loop the action for a finite number of iterations
              - conditions: '{{ button_left_long_loop }}'
                sequence:
                  - repeat:
                      while: '{{ repeat.index < button_long_max_loop_repeats | int }}'
                      sequence: !input action_button_left_long
            # if looping is not enabled run the custom action only once
            default: !input action_button_left_long
      - conditions:
          - '{{ trigger_action | string == button_left_release }}'
          # need to check the previous button event, stored in the provided input_text
          - '{{ last_controller_event | string == button_left_long }}'
        sequence:
          # if trigger is enabled fire the event
          - if:
              - condition: template
                value_template: '{{ button_left_release_trigger }}'
            then:
              - event: ahb_controller_event
                event_data:
                  controller: '{{ controller_id }}'
                  action: button_left_release
                  model: '{{ controller_model }}'
          # run the custom action
          - choose:
              - conditions: []
                sequence: !input action_button_left_release
      - conditions: '{{ trigger_action | string == button_right_short }}'
        sequence:
          - choose:
              # if double press event is enabled
              - conditions: '{{ button_right_double_press }}'
                sequence:
                  - choose:
                      # if previous event was a short press
                      - conditions: '{{ trigger_action | string in states(helper_last_controller_event) and trigger_delta | int <= helper_double_press_delay | int }}'
                        sequence:
                          # store the double press event in the last controller event helper
                          - service: input_text.set_value
                            data:
                              entity_id: !input helper_last_controller_event
                              value: '{{ {"a":"double_press","t":as_timestamp(now())} | to_json }}'
                          # run the double press action
                          # if trigger is enabled fire the event
                          - if:
                              - condition: template
                                value_template: '{{ button_right_double_trigger }}'
                            then:
                              - event: ahb_controller_event
                                event_data:
                                  controller: '{{ controller_id }}'
                                  action: button_right_double
                                  model: '{{ controller_model }}'
                          # run the custom action
                          - choose:
                              - conditions: []
                                sequence: !input action_button_right_double
                    # previous event was not a short press
                    default:
                      # wait for the double press event to occur, within the provided delay
                      # if the second press is received, automation is restarted
                      - delay:
                          milliseconds: '{{ adjusted_double_press_delay }}'
                      # if delay expires, no second press was received, therefore run the short press action
                      # run the short press action
                      # if trigger is enabled fire the event
                      - if:
                          - condition: template
                            value_template: '{{ button_right_short_trigger }}'
                        then:
                          - event: ahb_controller_event
                            event_data:
                              controller: '{{ controller_id }}'
                              action: button_right_short
                              model: '{{ controller_model }}'
                      # run the custom action
                      - choose:
                          - conditions: []
                            sequence: !input action_button_right_short
            # if double press event is disabled run the action for the single short press
            default:
              # if trigger is enabled fire the event
              - if:
                  - condition: template
                    value_template: '{{ button_right_short_trigger }}'
                then:
                  - event: ahb_controller_event
                    event_data:
                      controller: '{{ controller_id }}'
                      action: button_right_short
                      model: '{{ controller_model }}'
              # run the custom action
              - choose:
                  - conditions: []
                    sequence: !input action_button_right_short
      - conditions: '{{ trigger_action | string == button_right_long }}'
        sequence:
          # if trigger is enabled fire the event only once before looping the action
          - if:
              - condition: template
                value_template: '{{ button_right_long_trigger }}'
            then:
              - event: ahb_controller_event
                event_data:
                  controller: '{{ controller_id }}'
                  action: button_right_long
                  model: '{{ controller_model }}'
          - choose:
              # if looping is enabled, loop the action for a finite number of iterations
              - conditions: '{{ button_right_long_loop }}'
                sequence:
                  - repeat:
                      while: '{{ repeat.index < button_long_max_loop_repeats | int }}'
                      sequence: !input action_button_right_long
            # if looping is not enabled run the custom action only once
            default: !input action_button_right_long
      - conditions:
          - '{{ trigger_action | string == button_right_release }}'
          # need to check the previous button event, stored in the provided input_text
          - '{{ last_controller_event | string == button_right_long }}'
        sequence:
          # if trigger is enabled fire the event
          - if:
              - condition: template
                value_template: '{{ button_right_release_trigger }}'
            then:
              - event: ahb_controller_event
                event_data:
                  controller: '{{ controller_id }}'
                  action: button_right_release
                  model: '{{ controller_model }}'
          # run the custom action
          - choose:
              - conditions: []
                sequence: !input action_button_right_release
