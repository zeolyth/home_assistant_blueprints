# Blueprint metadata
blueprint:
  name: Advanced Hook for IKEA White Sprectrum Lights
  description: |
    Hook automation which allows to control one or more white spectrum lights through a controller. Supports brightness and color control for white temperature lights, with optional delayed turn off functionality.
    Features may vary depending on the selected Controllers.
    The blueprint uses entities therefore compatible with Zigbee2MQTT.
    
    **Inputs marked with * are mandatory.**
    
    I recommend using the same types of lights in one automation to avoid unexpected transition differences between the controlled loghts.
    I you want to control different types of light with the same controller, create separate hooks for every variant.
    
    Automations created with this blueprint must be connected with one or more of [my] (https://github.com/zsolthy/home_assistant_blueprints/) or [Awesome HA Blueprints'] (https://epmatt.github.io/awesome-ha-blueprints/docs/blueprints/controllers) controllers.
    Controllers are blueprints which allow to easily integrate a wide range of controllers (wall switches, remotes, dimmers, etc.) and use them to run a set of actions when interacting with them.
    
    This blueprint uses regions and therefore is only compatible with HA version 2024.6 and newer.
    
    The script is based on the [Awesome HA Blueprints](https://epmatt.github.io/awesome-ha-blueprints) project.
    
    Version 2024.09.28.2
  source_url: https://github.com/zsolthy/home_assistant_blueprints/blob/main/hook_ikea_white_spectrum_lights_advanced.yaml
  domain: automation
  homeassistant:
    min_version: 2024.6.0
  input:
    base:
      name: Controllers and Lights
      input:
        controller_entity:
          name: Controller Entities*
          description: |
            One or more controller entities which will control the Light. These values should match the one specified in the corresponding Controller automations.
            
            If you use Awesome HA Blueprints, select only controllers of the same model, otherwise it can happen that some buttons will operate undesirable!
          default: []
          selector:
            entity:
              multiple: true
              domain:
                - binary_sensor
                - sensor
        controller_model:
          name: Controller model
          description: The model for the controller used in this automation. If you use my controllers, you can leave it on Auto. Otherwise choose a value from the list of supported controllers.
          default: Auto
          selector:
            select:
              options:
                - Auto
                - IKEA E1524/E1810 TRÅDFRI Wireless 5-Button Remote
                - IKEA E1743 TRÅDFRI On/Off Switch & Dimmer
                - IKEA E1743 TRÅDFRI On/Off Switch & Dimmer (#2)
                - IKEA E1744 SYMFONISK Rotary Remote
                - IKEA E1766 TRÅDFRI Open/Close Remote
                - IKEA E1766 TRÅDFRI Open/Close Remote (#2)
                - IKEA E1812 TRÅDFRI Shortcut button
                - IKEA E2001/E2002 STYRBAR Remote control
                - IKEA E2001/E2002 STYRBAR Remote control (#2)
                - IKEA ICTC-G-1 TRÅDFRI wireless dimmer
                - OSRAM AC025XX00NJ SMART+ Switch Mini
                - Philips 324131092621 Hue Dimmer switch
                - Philips 8718699693985 Hue Smart Button
                - Philips 929002398602 Hue Dimmer switch v2
                - SONOFF SNZB-01 Wireless Switch
                - Xiaomi WXCJKG11LM Aqara Opple 2 button remote
                - Xiaomi WXCJKG12LM Aqara Opple 4 button remote
                - Xiaomi WXCJKG12LM Aqara Opple 4 button remote (#2)
                - Xiaomi WXCJKG13LM Aqara Opple 6 button remote
                - Xiaomi WXCJKG13LM Aqara Opple 6 button remote (#2)
                - Xiaomi WXCJKG13LM Aqara Opple 6 button remote (#3)
                - Xiaomi WXKG11LM Aqara Wireless Switch Mini
        input_light:
          name: Lights*
          description: Lights which will be controlled with this automation.
          default: []
          selector:
            entity:
              multiple: true
              domain: light
    delayed_turn_off:
      name: Delayed turn off
      collapsed: true
      input:
        delayed_turn_off_enable:
          name: Enable delayed turn off of the lights
          default: false
          selector:
            boolean:
        delayed_turn_off_interval:
          name: Delay before turning off the lights in seconds
          default: 100
          selector:
            number:
              unit_of_measurement: seconds
              mode: box
    transition_settings:
      name: Light advanced settings - transition
      collapsed: true
      input:
        light_transition:
          name: Light Transition
          description: Number that represents the time (in milliseconds) the light should take turn on or off, if the light supports it.
          default: 250
          selector:
            number:
              min: 0
              max: 60000
              unit_of_measurement: milliseconds
              mode: box
    brightness_settings:
      name: Light advanced settings - brightness
      collapsed: true
      input:
        min_brightness:
          name: Light minimum brightness
          description: The minimum brightness the light can be set with this automation.
          default: 1
          selector:
            number:
              min: 1
              max: 255
              unit_of_measurement: brightness
              mode: slider
        max_brightness:
          name: Light maximum brightness
          description: The maximum brightness the light can be set with this automation.
          default: 255
          selector:
            number:
              min: 0
              max: 255
              unit_of_measurement: brightness
              mode: slider
        brightness_steps_short:
          name: Light brightness steps - short actions
          description: Number of steps from min to max brightness when controlling brightness with short actions (eg. button press).
          default: 10
          selector:
            number:
              min: 1
              max: 255
              unit_of_measurement: steps
              mode: box
        brightness_steps_long:
          name: Light brightness steps - long actions
          description: Number of steps from min to max brightness when controlling brightness with long actions (eg. button hold or controller rotation).
          default: 10
          selector:
            number:
              min: 1
              max: 255
              unit_of_measurement: steps
              mode: box
        force_brightness:
          name: Force brightness value at turn on
          description: Force brightness to the "On brightness" input value, when the light is being turned on.
          default: false
          selector:
            boolean:
        on_brightness:
          name: On brightness
          description: Brightness value to force when turning on the light
          default: 255
          selector:
            number:
              min: 0
              max: 255
              unit_of_measurement: brightness
              mode: slider
        smooth_power_on:
          name: Smooth power on
          description: Force the light to turn on at minimum brightness when a brightness up command (single or continuous) is triggered and light is off.
          default: true
          selector:
            boolean:
        smooth_power_off:
          name: Smooth power off
          description: Allow a brightness down command (single or continuous) to turn off the light when at minimum brightness. Disabling this will prevent the light from being turned off by brightness down commands.
          default: true
          selector:
            boolean:
    color_temp_settings:
      name: Light advanced settings - color temperature
      collapsed: true
      input:
        min_color_temp:
          name: Light minimum color temperature
          description: The minimum color temperature the light can be set with this automation.
          default: 250
          selector:
            number:
              min: 250
              max: 454
              unit_of_measurement: mireds
              mode: slider
        max_color_temp:
          name: Light maximum color temperature
          description: The maximum color temperature the light can be set with this automation.
          default: 454
          selector:
            number:
              min: 250
              max: 454
              unit_of_measurement: mireds
              mode: slider
        color_temp_steps_short:
          name: Light color temperature steps - short actions
          description: Number of steps from min to max color temperature when controlling color temperature with short actions (eg. button press).
          default: 10
          selector:
            number:
              min: 1
              max: 204
              unit_of_measurement: steps
              mode: box
        color_temp_steps_long:
          name: Light color temperature steps - long actions
          description: Number of steps from min to max color temperature when controlling color temperature with long actions (eg. button hold or controller rotation).
          default: 10
          selector:
            number:
              min: 1
              max: 204
              unit_of_measurement: steps
              mode: box
        force_color_temp:
          name: Force color temperature value at turn on
          description: Force color temperature to the "On color temperature" input value, when the light is being turned on.
          default: false
          selector:
            boolean:
        on_color_temp:
          name: On color temperature
          description: color temperature value to force when turning on the light
          default: 294
          selector:
            number:
              min: 250
              max: 454
              unit_of_measurement: mireds
              mode: slider
# Automation schema
variables:
  # convert blueprint inputs into variables to be used in templates
  controller_entity: !input controller_entity
  input_controller_model: !input controller_model
  input_light: !input input_light
  # supported controllers and mappings
  controller_mapping:
    Binary Sensor:
      turn_on: state_on
      turn_off: state_off
    IKEA E1524/E1810 TRÅDFRI Wireless 5-Button Remote:
      brightness_up: button_up_short
      brightness_up_repeat: button_up_long
      brightness_down: button_down_short
      brightness_down_repeat: button_down_long
      color_down: button_left_short
      color_down_repeat: button_left_long
      color_up: button_right_short
      color_up_repeat: button_right_long
      toggle: button_center_short
    IKEA E1743 TRÅDFRI On/Off Switch & Dimmer:
      turn_on: button_up_short
      brightness_up_repeat: button_up_long
      color_up: button_up_double
      turn_off: button_down_short
      brightness_down_repeat: button_down_long
      color_down: button_down_double
    IKEA E1743 TRÅDFRI On/Off Switch & Dimmer (#2):
      brightness_up: button_up_short
      brightness_up_repeat: button_up_long
      turn_on: button_up_double
      brightness_down: button_down_short
      brightness_down_repeat: button_down_long
      turn_off: button_down_double
    IKEA E1744 SYMFONISK Rotary Remote:
      brightness_down_repeat: rotate_left
      brightness_up_repeat: rotate_right
      toggle: click_short
      color_up: click_double
      color_down: click_triple
    IKEA E1766 TRÅDFRI Open/Close Remote:
      brightness_up: button_up_short
      turn_on: button_up_double
      brightness_down: button_down_short
      turn_off: button_down_double
    IKEA E1766 TRÅDFRI Open/Close Remote (#2):
      brightness_up: button_up_short
      color_up: button_up_double
      brightness_down: button_down_short
      color_down: button_down_double
    IKEA E1812 TRÅDFRI Shortcut button:
      toggle: button_short
      color_up: button_double
    IKEA E2001/E2002 STYRBAR Remote control:
      turn_on: button_up_short
      brightness_up_repeat: button_up_long
      turn_off: button_down_short
      brightness_down_repeat: button_down_long
      color_down: button_left_short
      color_down_repeat: button_left_long
      color_up: button_right_short
      color_up_repeat: button_right_long
    IKEA E2001/E2002 STYRBAR Remote control (#2):
      brightness_up: button_up_short
      brightness_up_repeat: button_up_long
      turn_on: button_up_double
      brightness_down: button_down_short
      brightness_down_repeat: button_down_long
      turn_off: button_down_double
      color_down: button_left_short
      color_down_repeat: button_left_long
      color_up: button_right_short
      color_up_repeat: button_right_long
    IKEA ICTC-G-1 TRÅDFRI wireless dimmer:
      brightness_down_repeat: rotate_left
      brightness_up_repeat: rotate_right
    OSRAM AC025XX00NJ SMART+ Switch Mini:
      brightness_up: button_up_short
      brightness_up_repeat: button_up_long
      color_up: button_up_double
      brightness_down: button_down_short
      brightness_down_repeat: button_down_long
      color_down: button_down_double
      toggle: button_center_short
    Philips 324131092621 Hue Dimmer switch:
      turn_on: button_on_short
      color_up_repeat: button_on_long
      turn_off: button_off_short
      color_down_repeat: button_off_long
      brightness_up: button_up_short
      brightness_up_repeat: button_up_long
      brightness_down: button_down_short
      brightness_down_repeat: button_down_long
    Philips 8718699693985 Hue Smart Button:
      toggle: button_short
    Philips 929002398602 Hue Dimmer switch v2:
      turn_on: button_on_short
      color_up_repeat: button_on_long
      turn_off: button_off_short
      color_down_repeat: button_off_long
      brightness_up: button_up_short
      brightness_up_repeat: button_up_long
      brightness_down: button_down_short
      brightness_down_repeat: button_down_long
    SONOFF SNZB-01 Wireless Switch:
      toggle: button_short
      color_up: button_double
    Xiaomi WXCJKG11LM Aqara Opple 2 button remote:
      turn_on: button_1_short
      brightness_up_repeat: button_1_long
      color_up: button_1_double
      turn_off: button_2_short
      brightness_down_repeat: button_2_long
      color_down: button_2_double
    Xiaomi WXCJKG12LM Aqara Opple 4 button remote:
      turn_on: button_1_short
      brightness_up_repeat: button_1_long
      color_up: button_1_double
      turn_off: button_2_short
      brightness_down_repeat: button_2_long
      color_down: button_2_double
    Xiaomi WXCJKG12LM Aqara Opple 4 button remote (#2):
      turn_on: button_3_short
      brightness_up_repeat: button_3_long
      color_up: button_3_double
      turn_off: button_4_short
      brightness_down_repeat: button_4_long
      color_down: button_4_double
    Xiaomi WXCJKG13LM Aqara Opple 6 button remote:
      turn_on: button_1_short
      brightness_up_repeat: button_1_long
      color_up: button_1_double
      turn_off: button_2_short
      brightness_down_repeat: button_2_long
      color_down: button_2_double
    Xiaomi WXCJKG13LM Aqara Opple 6 button remote (#2):
      turn_on: button_3_short
      brightness_up_repeat: button_3_long
      color_up: button_3_double
      turn_off: button_4_short
      brightness_down_repeat: button_4_long
      color_down: button_4_double
    Xiaomi WXCJKG13LM Aqara Opple 6 button remote (#3):
      turn_on: button_5_short
      brightness_up_repeat: button_5_long
      color_up: button_5_double
      turn_off: button_6_short
      brightness_down_repeat: button_6_long
      color_down: button_6_double
    Xiaomi WXKG11LM Aqara Wireless Switch Mini:
      toggle: button_short
      color_up: button_double
  delayed_turn_off_enable: !input delayed_turn_off_enable
  delayed_turn_off_interval: !input delayed_turn_off_interval
  light_transition: !input light_transition
  min_brightness: !input min_brightness
  max_brightness: !input max_brightness
  brightness_steps_short: !input brightness_steps_short
  brightness_steps_long: !input brightness_steps_long
  brightness_steps_short_calc: '{{ (max_brightness - min_brightness) / brightness_steps_short }}'
  brightness_steps_long_calc: '{{ (max_brightness - min_brightness) / brightness_steps_long }}'
  force_brightness: !input force_brightness
  on_brightness: !input on_brightness
  smooth_power_on: !input smooth_power_on
  smooth_power_off: !input smooth_power_off
  min_color_temp: !input min_color_temp
  max_color_temp: !input max_color_temp
  color_temp_steps_short: !input color_temp_steps_short
  color_temp_steps_long: !input color_temp_steps_long
  color_temp_steps_short_calc: '{{ (max_color_temp - min_color_temp) / color_temp_steps_short }}'
  color_temp_steps_long_calc: '{{ (max_color_temp - min_color_temp) / color_temp_steps_long }}'
  force_color_temp: !input force_color_temp
  on_color_temp: !input on_color_temp
  color_modes:
    Auto: auto
    Color Temperature: color_temp
    None: none
  # extract light color mode id
  light_color_mode_id: >-
    {%- set data = namespace(color_mode = []) -%}
    {%- for light_item in input_light -%}
      {%- if "color_temp" in state_attr(light_item, "supported_color_modes") -%}
        {%- set data.color_mode = data.color_mode + [color_modes["Color Temperature"]] -%}
      {%- else -%}
        {%- set data.color_mode = data.color_mode + [color_modes["None"]] -%}
      {%- endif -%}
    {%- endfor -%}
    {{ data.color_mode }}
mode: restart
max_exceeded: silent
trigger:
  - platform: event
    event_type: ahb_controller_event
condition: '{{ trigger.event.data.controller in controller_entity }}'
action:
  - variables:
      controller_model: >-
        {%- if input_controller_model == "Auto" -%}
          {%- if "model" in trigger.event.data -%}
            {{ trigger.event.data.model }}
          {%- else -%}
            None
          {%- endif -%}
        {%- else -%}
          {{ input_controller_model }}
        {%- endif -%}
      # choose actions for buttons based on controller
      brightness_up: '{{ controller_mapping[controller_model]["brightness_up"] | default(None) }}'
      brightness_up_repeat: '{{ controller_mapping[controller_model]["brightness_up_repeat"] | default(None) }}'
      brightness_down: '{{ controller_mapping[controller_model]["brightness_down"] | default(None) }}'
      brightness_down_repeat: '{{ controller_mapping[controller_model]["brightness_down_repeat"] | default(None) }}'
      color_up: '{{ controller_mapping[controller_model]["color_up"] | default(None) }}'
      color_up_repeat: '{{ controller_mapping[controller_model]["color_up_repeat"] | default(None) }}'
      color_down: '{{ controller_mapping[controller_model]["color_down"] | default(None) }}'
      color_down_repeat: '{{ controller_mapping[controller_model]["color_down_repeat"] | default(None) }}'
      toggle: '{{ controller_mapping[controller_model]["toggle"] | default(None) }}'
      turn_on: '{{ controller_mapping[controller_model]["turn_on"] | default(None) }}'
      turn_off: '{{ controller_mapping[controller_model]["turn_off"] | default(None) }}'
      trigger_action: >-
        {%- set ta = trigger.event.data.action -%}
        {%- if ta == toggle -%}
          {%- if states(input_light[0]) | lower == "on" -%}
            turn_off
          {%- else -%}
            turn_on
          {%- endif -%}
        {%- else -%}
          {{ ta }}
        {%- endif -%}
  - repeat:
      for_each: '{{ expand(input_light) | map(attribute="entity_id") | list }}'
      sequence:
        - variables:
            light_item: '{{ repeat.item }}'
            light_color_mode_id_item: '{{ light_color_mode_id[repeat.index - 1] }}'
        - choose:
            # - conditions: '{{ trigger_action | string == toggle }}'
            #   sequence:
            #     - if:
            #         - condition: template
            #           value_template: '{{ force_brightness }}'
            #       then:
            #         - service: light.toggle
            #           data:
            #             entity_id: '{{ light_item }}'
            #             brightness: !input on_brightness
            #             transition: '{{ light_transition / 1000 }}'
            #       else:
            #         - service: light.toggle
            #           data:
            #             entity_id: '{{ light_item }}'
            #             transition: '{{ light_transition / 1000 }}'
            - conditions: '{{ trigger_action == "turn_on" or trigger_action == turn_on }}'
              sequence:
                - if:
                    - condition: template
                      value_template: '{{ force_brightness }}'
                  then:
                    - service: light.turn_on
                      data:
                        entity_id: '{{ light_item }}'
                        brightness: !input on_brightness
                        transition: '{{ light_transition / 1000 }}'
                  else:
                    - service: light.turn_on
                      data:
                        entity_id: '{{ light_item }}'
                        transition: '{{ light_transition / 1000 }}'
            - conditions: '{{ trigger_action == "turn_off" or trigger_action == turn_off }}'
              sequence:
                - service: light.turn_off
                  data:
                    entity_id: '{{ light_item }}'
                    transition: '{{ light_transition / 1000 }}'
            - conditions: '{{ trigger_action == brightness_up }}'
              sequence:
                - choose:
                    # if light is off and smooth power on is disabled, turn it on at the previously saved brightness
                    - conditions: '{{ states(light_item) == "off" and not smooth_power_on}}'
                      sequence:
                        - service: light.turn_on
                          data:
                            entity_id: light_item
                            transition: '{{ light_transition / 1000 }}'
                    # if light is off and smooth power on is enabled, turn it on at minimum brightness
                    - conditions: '{{ states(light_item) == "off" and smooth_power_on}}'
                      sequence:
                        - service: light.turn_on
                          data:
                            entity_id: '{{ light_item }}'
                            brightness: '{{ min_brightness }}'
                            transition: '{{ light_transition / 1000 }}'
                  # else the light is on, hence increase its brightness
                  default:
                    - service: light.turn_on
                      data:
                        entity_id: '{{ light_item }}'
                        brightness: '{{ [[state_attr(light_item, "brightness") + brightness_steps_short_calc, min_brightness] | max, max_brightness] | min }}'
                        # transition: 0.25
                        transition: '{{ light_transition / 1000 }}'
            - conditions: '{{ trigger_action == brightness_down and states(light_item) == "on" }}'
              sequence:
                - if:
                    - condition: template
                      value_template: '{{ smooth_power_off and state_attr(light_item, "brightness") == min_brightness }}'
                  then:
                    - service: light.turn_off
                      data:
                        entity_id: '{{ light_item }}'
                        transition: '{{ light_transition / 1000 }}'
                  else:
                    - service: light.turn_on
                      data:
                        entity_id: '{{ light_item }}'
                        brightness: '{{ [[state_attr(light_item, "brightness") - brightness_steps_short_calc, min_brightness] | max, max_brightness] | min }}'
                        # transition: 0.25
                        transition: '{{ light_transition / 1000 }}'
            - conditions: '{{ trigger_action == brightness_up_repeat }}'
              sequence:
                # first step for the smooth power on feature: subsequent steps can skip this check since light will be already on
                - choose:
                    # if light is off and smooth power on is disabled, turn it on at the previously saved brightness
                    - conditions: '{{ states(light_item) == "off" and not smooth_power_on}}'
                      sequence:
                        - service: light.turn_on
                          data:
                            entity_id: '{{ light_item }}'
                            transition: '{{ light_transition / 1000 }}'
                        - delay:
                            milliseconds: '{{ light_transition }}'
                    # if light is off and smooth power on is enabled, turn it on at minimum brightness
                    - conditions: '{{ states(light_item) == "off" and smooth_power_on}}'
                      sequence:
                        - service: light.turn_on
                          data:
                            entity_id: '{{ light_item }}'
                            brightness: '{{ min_brightness }}'
                            transition: '{{ light_transition / 1000 }}'
                        - delay:
                            milliseconds: '{{ light_transition }}'
                # else move on to the loop for increasing the light brightness
                - repeat:
                    while: '{{ true }}'
                    sequence:
                      - service: light.turn_on
                        data:
                          entity_id: '{{ light_item }}'
                          brightness: '{{ [[state_attr(light_item, "brightness") + brightness_steps_long_calc, min_brightness] | max, max_brightness] | min }}'
                          # transition: 0.25
                          transition: '{{ light_transition / 1000 }}'
                      - delay:
                          # milliseconds: 250
                          milliseconds: '{{ light_transition }}'
            - conditions: '{{ trigger_action == brightness_down_repeat and states(light_item) == "on"  }}'
              sequence:
                - if:
                    # using a separate sequence for the smooth power off feature to not perform unnecessary checks at every iteration when the feature is disabled
                    - condition: template
                      value_template: '{{ smooth_power_off }}'
                  then:
                    - repeat:
                        # continue lowering brightness until the light turns off
                        while: '{{ states(light_item) != "off" }}'
                        sequence:
                          - if:
                              # if the light is at minimum brightness, turn it off
                              - condition: template
                                value_template: '{{ state_attr(light_item, "brightness") == min_brightness }}'
                            then:
                              - service: light.turn_off
                                data:
                                  entity_id: '{{ light_item }}'
                                  transition: '{{ light_transition / 1000 }}'
                              - delay:
                                  milliseconds: '{{ light_transition }}'
                            # else lower the light's brightness
                            else:
                              - service: light.turn_on
                                data:
                                  entity_id: '{{ light_item }}'
                                  brightness: '{{ [[state_attr(light_item, "brightness") - brightness_steps_long_calc, min_brightness] | max, max_brightness] | min }}'
                                  # transition: 0.25
                                  transition: '{{ light_transition / 1000 }}'
                              - delay:
                                  # milliseconds: 250
                                  milliseconds: '{{ light_transition }}'
                  else:
                    - repeat:
                        # continue lowering brightness until the light turns off
                        while: '{{ states(light_item) != "off" }}'
                        sequence:
                          # lower the light's brightness. since smooth power off is disabled, never let the brightness move below the user-provided minimum
                          - service: light.turn_on
                            data:
                              entity_id: '{{ light_item }}'
                              brightness: '{{ [[state_attr(light_item, "brightness") - brightness_steps_long_calc, min_brightness] | max, max_brightness] | min }}'
                              # transition: 0.25
                              transition: '{{ light_transition / 1000 }}'
                          - delay:
                              # milliseconds: 250
                              milliseconds: '{{ light_transition }}'
            - conditions: '{{ trigger_action == color_up and light_color_mode_id_item != "none" }}'
              sequence:
                - if:
                    - condition: template
                      value_template: '{{ light_color_mode_id_item == "color_temp" }}'
                  then:
                    - service: light.turn_on
                      data:
                        entity_id: '{{ light_item }}'
                        color_temp: '{{ state_attr(light_item, "color_temp") | int + 50 }}'
                        # transition: 0.25
                        transition: '{{ light_transition / 1000 }}'
                  else:
                    - service: light.turn_on
                      data:
                        entity_id: '{{ light_item }}'
                        # transition: 0.25
                        transition: '{{ light_transition / 1000 }}'
            - conditions: '{{ trigger_action == color_down and light_color_mode_id_item != "none" }}'
              sequence:
                - if:
                    - condition: template
                      value_template: '{{ light_color_mode_id_item == "color_temp" }}'
                  then:
                    - service: light.turn_on
                      data:
                        entity_id: '{{ light_item }}'
                        color_temp: '{{ [state_attr(light_item, "color_temp") | int - 50, 1] | max }}'
                        # transition: 0.25
                        transition: '{{ light_transition / 1000 }}'
                  else:
                    - service: light.turn_on
                      data:
                        entity_id: '{{ light_item }}'
                        # transition: 0.25
                        transition: '{{ light_transition / 1000 }}'
            - conditions: '{{ trigger_action == color_up_repeat and light_color_mode_id_item != "none" }}'
              sequence:
                - if:
                    - condition: template
                      value_template: '{{ light_color_mode_id_item == "color_temp" }}'
                  then:
                    - repeat:
                        while: '{{ true }}'
                        sequence:
                          - service: light.turn_on
                            data:
                              entity_id: '{{ light_item }}'
                              color_temp: '{{ state_attr(light_item, "color_temp") | int + 50 }}'
                              # transition: 0.25
                              transition: '{{ light_transition / 1000 }}'
                          - delay:
                              # milliseconds: 250
                              milliseconds: '{{ light_transition }}'
                  else:
                    - repeat:
                        while: '{{ true }}'
                        sequence:
                          - service: light.turn_on
                            data:
                              entity_id: '{{ light_item }}'
                              # transition: 0.25
                              transition: '{{ light_transition / 1000 }}'
                          - delay:
                              # milliseconds: 250
                              milliseconds: '{{ light_transition }}'
            - conditions: '{{ trigger_action == color_down_repeat and light_color_mode_id_item != "none" }}'
              sequence:
                - if:
                    - condition: template
                      value_template: '{{ light_color_mode_id_item == "color_temp" }}'
                  then:
                    - repeat:
                        while: '{{ true }}'
                        sequence:
                          - service: light.turn_on
                            data:
                              entity_id: '{{ light_item }}'
                              color_temp: '{{ [state_attr(light_item, "color_temp") | int - 50, 1] | max }}'
                              # transition: 0.25
                              transition: '{{ light_transition / 1000 }}'
                          - delay:
                              # milliseconds: 250
                              milliseconds: '{{ light_transition }}'
                  else:
                    - repeat:
                        while: '{{ true }}'
                        sequence:
                          - service: light.turn_on
                            data:
                              entity_id: '{{ light_item }}'
                              # transition: 0.25
                              transition: '{{ light_transition / 1000 }}'
                          - delay:
                              # milliseconds: 250
                              milliseconds: '{{ light_transition }}'
  - if:
      - condition: template
        value_template: '{{ delayed_turn_off_enable }}'
    then:
      - delay:
          milliseconds: '{{ light_transition }}'
      - if:
          - condition: template
            value_template: '{{ states(input_light[0]) == "on" }}'
        then:
          - delay:
              milliseconds: '{{ delayed_turn_off_interval * 1000 - light_transition }}'
          - repeat:
              for_each: '{{ expand(input_light) | map(attribute="entity_id") | list }}'
              sequence:
                - variables:
                    light_item: '{{ repeat.item }}'
                - service: light.turn_off
                  data:
                    entity_id: '{{ light_item }}'
                    transition: '{{ light_transition / 1000 }}'
