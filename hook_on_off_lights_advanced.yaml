# Blueprint metadata
blueprint:
  name: Advanced Hook for Lights with only On/Off Functionality
  description: |
    Hook automation which allows to control one or more on/off lights through a controller, with optional delayed turn off functionality.
    The blueprint uses entities therefore compatible with Zigbee2MQTT.
    
    **Inputs marked with * are mandatory.**
    
    Automations created with this blueprint must be connected with one or more of [my] (https://github.com/zsolthy/home_assistant_blueprints/) or [Awesome HA Blueprints'] (https://epmatt.github.io/awesome-ha-blueprints/docs/blueprints/controllers) controllers.
    Controllers are blueprints which allow to easily integrate a wide range of controllers (wall switches, remotes, dimmers, etc.) and use them to run a set of actions when interacting with them.
    
    This blueprint uses regions and therefore is only compatible with HA version 2024.6 and newer.
    
    The script is based on the [Awesome HA Blueprints](https://epmatt.github.io/awesome-ha-blueprints) project.
    
    Version 2024.09.28
  source_url: https://github.com/zsolthy/home_assistant_blueprints/blob/main/hook_on_off_lights_advanced.yaml
  domain: automation
  homeassistant:
    min_version: 2024.6.0
  input:
    base:
      name: Controllers and Lights
      input:
        controller_entity:
          name: Controller Entities*
          description: |
            One or more controller entities which will control the Light. These values should match the one specified in the corresponding Controller automations.
            
            If you use Awesome HA Blueprints, select only controllers of the same model, otherwise it can happen that some buttons will operate undesirable!
          default: []
          selector:
            entity:
              multiple: true
              domain:
                - binary_sensor
                - sensor
        controller_model:
          name: Controller model
          description: The model for the controller used in this automation. If you use my controllers, you can leave it on Auto. Otherwise choose a value from the list of supported controllers.
          default: Auto
          selector:
            select:
              options:
                - Auto
                - IKEA E1524/E1810 TRÅDFRI Wireless 5-Button Remote
                - IKEA E1743 TRÅDFRI On/Off Switch & Dimmer
                - IKEA E1743 TRÅDFRI On/Off Switch & Dimmer (#2)
                - IKEA E1744 SYMFONISK Rotary Remote
                - IKEA E1766 TRÅDFRI Open/Close Remote
                - IKEA E1812 TRÅDFRI Shortcut button
                - IKEA E2001/E2002 STYRBAR Remote control
                - IKEA E2001/E2002 STYRBAR Remote control (#2)
                - OSRAM AC025XX00NJ SMART+ Switch Mini
                - Philips 324131092621 Hue Dimmer switch
                - Philips 8718699693985 Hue Smart Button
                - Philips 929002398602 Hue Dimmer switch v2
                - SONOFF SNZB-01 Wireless Switch
                - Xiaomi WXCJKG11LM Aqara Opple 2 button remote
                - Xiaomi WXCJKG12LM Aqara Opple 4 button remote
                - Xiaomi WXCJKG12LM Aqara Opple 4 button remote (#2)
                - Xiaomi WXCJKG13LM Aqara Opple 6 button remote
                - Xiaomi WXCJKG13LM Aqara Opple 6 button remote (#2)
                - Xiaomi WXCJKG13LM Aqara Opple 6 button remote (#3)
                - Xiaomi WXKG11LM Aqara Wireless Switch Mini
        input_light:
          name: Lights*
          description: Lights which will be controlled with this automation.
          default: []
          selector:
            entity:
              multiple: true
              domain: light
    delayed_turn_off:
      name: Delayed turn off
      collapsed: true
      input:
        delayed_turn_off_enable:
          name: Enable delayed turn off of the lights
          default: false
          selector:
            boolean:
        delayed_turn_off_interval:
          name: Delay before turning off the lights in seconds
          default: 100
          selector:
            number:
              unit_of_measurement: seconds
              mode: box
# Automation schema
variables:
  # convert blueprint inputs into variables to be used in templates
  controller_entity: !input controller_entity
  input_controller_model: !input controller_model
  input_light: !input input_light
  # supported controllers and mappings
  controller_mapping:
    Binary Sensor:
      turn_on: state_on
      turn_off: state_off
    IKEA E1524/E1810 TRÅDFRI Wireless 5-Button Remote:
      toggle: button_center_short
    IKEA E1743 TRÅDFRI On/Off Switch & Dimmer:
      turn_on: button_up_short
      turn_off: button_down_short
    IKEA E1743 TRÅDFRI On/Off Switch & Dimmer (#2):
      turn_on: button_up_double
      turn_off: button_down_double
    IKEA E1744 SYMFONISK Rotary Remote:
      toggle: click_short
    IKEA E1766 TRÅDFRI Open/Close Remote:
      turn_on: button_up_double
      turn_off: button_down_double
    IKEA E1812 TRÅDFRI Shortcut button:
      toggle: button_short
      color_up: button_double
    IKEA E2001/E2002 STYRBAR Remote control:
      turn_on: button_up_short
      turn_off: button_down_short
    IKEA E2001/E2002 STYRBAR Remote control (#2):
      turn_on: button_up_double
      turn_off: button_down_double
    OSRAM AC025XX00NJ SMART+ Switch Mini:
      toggle: button_center_short
    Philips 324131092621 Hue Dimmer switch:
      turn_on: button_on_short
      turn_off: button_off_short
    Philips 8718699693985 Hue Smart Button:
      toggle: button_short
    Philips 929002398602 Hue Dimmer switch v2:
      turn_on: button_on_short
      turn_off: button_off_short
    SONOFF SNZB-01 Wireless Switch:
      toggle: button_short
    Xiaomi WXCJKG11LM Aqara Opple 2 button remote:
      turn_on: button_1_short
      turn_off: button_2_short
    Xiaomi WXCJKG12LM Aqara Opple 4 button remote:
      turn_on: button_1_short
      turn_off: button_2_short
    Xiaomi WXCJKG12LM Aqara Opple 4 button remote (#2):
      turn_on: button_3_short
      turn_off: button_4_short
    Xiaomi WXCJKG13LM Aqara Opple 6 button remote:
      turn_on: button_1_short
      turn_off: button_2_short
    Xiaomi WXCJKG13LM Aqara Opple 6 button remote (#2):
      turn_on: button_3_short
      turn_off: button_4_short
    Xiaomi WXCJKG13LM Aqara Opple 6 button remote (#3):
      turn_on: button_5_short
      turn_off: button_6_short
    Xiaomi WXKG11LM Aqara Wireless Switch Mini:
      toggle: button_short
  delayed_turn_off_enable: !input delayed_turn_off_enable
  delayed_turn_off_interval: !input delayed_turn_off_interval
mode: restart
max_exceeded: silent
trigger:
  - platform: event
    event_type: ahb_controller_event
condition: '{{ trigger.event.data.controller in controller_entity }}'
action:
  - variables:
      controller_model: >-
        {%- if input_controller_model == "Auto" -%}
          {%- if "model" in trigger.event.data -%}
            {{ trigger.event.data.model }}
          {%- else -%}
            None
          {%- endif -%}
        {%- else -%}
          {{ input_controller_model }}
        {%- endif -%}
      # choose actions for buttons based on controller
      toggle: '{{ controller_mapping[controller_model]["toggle"] | default(None) }}'
      turn_on: '{{ controller_mapping[controller_model]["turn_on"] | default(None) }}'
      turn_off: '{{ controller_mapping[controller_model]["turn_off"] | default(None) }}'
      trigger_action: >-
        {%- set ta = trigger.event.data.action -%}
        {%- if ta == toggle -%}
          {%- if states(input_light[0]) | lower == "on" -%}
            turn_off
          {%- else -%}
            turn_on
          {%- endif -%}
        {%- else -%}
          {{ ta }}
        {%- endif -%}
  - repeat:
      for_each: '{{ expand(input_light) | map(attribute="entity_id") | list }}'
      sequence:
        - variables:
            light_item: '{{ repeat.item }}'
        - choose:
            # - conditions: '{{ trigger_action | string == toggle }}'
            #   sequence:
            #     - service: light.toggle
            #       data:
            #         entity_id: '{{ light_item }}'
            - conditions: '{{ trigger_action == "turn_on" or trigger_action == turn_on }}'
              sequence:
                - service: light.turn_on
                  data:
                    entity_id: '{{ light_item }}'
            - conditions: '{{ trigger_action == "turn_off" or trigger_action == turn_off }}'
              sequence:
                - service: light.turn_off
                  data:
                    entity_id: '{{ light_item }}'
  - if:
      - condition: template
        value_template: '{{ delayed_turn_off_enable }}'
    then:
      - if:
          - condition: template
            value_template: '{{ states(input_light[0]) == "on" }}'
        then:
          - delay:
              milliseconds: '{{ delayed_turn_off_interval * 1000 }}'
          - repeat:
              for_each: '{{ expand(input_light) | map(attribute="entity_id") | list }}'
              sequence:
                - variables:
                    light_item: '{{ repeat.item }}'
                - service: light.turn_off
                  data:
                    entity_id: '{{ light_item }}'
